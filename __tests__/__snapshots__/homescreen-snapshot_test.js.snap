// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomeScreen test 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#ebebeb",
      "flex": 1,
    }
  }
>
  <View
    accessibilityComponentType="button"
    accessibilityLabel="Delivery"
    accessibilityTraits={
      Array [
        "button",
      ]
    }
    accessible={true}
    collapsable={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "padding": 8,
              "textAlign": "center",
            },
            Object {
              "color": "#841584",
            },
          ]
        }
      >
        Delivery
      </Text>
    </View>
  </View>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "alignItems": "center",
      }
    }
    data={
      Array [
        Object {
          "defaultQuantity": 10,
          "imageUrl": 1,
          "key": 1,
          "pricePerDefaultQuantity": 2.99,
          "title": "Cups",
        },
        Object {
          "defaultQuantity": 2,
          "imageUrl": 1,
          "key": 2,
          "pricePerDefaultQuantity": 2.99,
          "title": "Balls",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    onViewableItemsChanged={undefined}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#66b4f3",
            }
          }
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                undefined,
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Image
              source={1}
              style={
                Object {
                  "height": 200,
                  "width": 200,
                }
              }
            />
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#66b4f3",
            }
          }
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                undefined,
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Image
              source={1}
              style={
                Object {
                  "height": 200,
                  "width": 200,
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "space-between",
        "padding": 15,
      }
    }
  >
    <View>
      <RCTScrollView
        data={
          Array [
            Object {
              "defaultQuantity": 10,
              "imageUrl": 1,
              "key": 1,
              "pricePerDefaultQuantity": 2.99,
              "title": "Cups",
            },
            Object {
              "defaultQuantity": 2,
              "imageUrl": 1,
              "key": 2,
              "pricePerDefaultQuantity": 2.99,
              "title": "Balls",
            },
          ]
        }
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        numColumns={1}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        onViewableItemsChanged={undefined}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        updateCellsBatchingPeriod={50}
        windowSize={21}
      >
        <View>
          <View
            onLayout={[Function]}
            style={null}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              disabled={false}
              ellipsizeMode="tail"
            >
              Cups
              : 
              0
            </Text>
          </View>
          <View
            onLayout={[Function]}
            style={null}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              disabled={false}
              ellipsizeMode="tail"
            >
              Balls
              : 
              0
            </Text>
          </View>
        </View>
      </RCTScrollView>
    </View>
    <View
      accessibilityComponentType="button"
      accessibilityLabel="Clear Cart"
      accessibilityTraits={
        Array [
          "button",
        ]
      }
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          disabled={false}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#841584",
              },
            ]
          }
        >
          Clear Cart
        </Text>
      </View>
    </View>
    <View
      accessibilityComponentType="button"
      accessibilityLabel="Checkout"
      accessibilityTraits={
        Array [
          "button",
          "disabled",
        ]
      }
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <View
        style={
          Array [
            Object {},
            Object {},
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          disabled={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#841584",
              },
              Object {
                "color": "#cdcdcd",
              },
            ]
          }
        >
          Checkout
        </Text>
      </View>
    </View>
  </View>
</View>
`;
